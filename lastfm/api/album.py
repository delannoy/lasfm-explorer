#!/usr/bin/env python3

import uuid

import typ
import auth
import param
import request
import secret

import pydantic

@param.required
@pydantic.validate_arguments
def addTags(method: str, api_key: typ.UUID, artist: str, album: str, tags: typ.tags, api_sig: typ.UUID = None, sk: str = secret.sk) -> typ.response:
    '''Tag an album using a list of user supplied tags.
        artist  : Required : The artist name
        album   : Required : The album name
        tags    : Required : A comma delimited list of user supplied tags to apply to this album. Accepts a maximum of 10 tags.
        api_sig : Required : A Last.fm method signature. See authentication for more information.
        sk      : Required : A session key generated by authenticating a user via the authentication protocol.
        api_key : Required : A Last.fm API key.
    '''
    tags = param.listToCSV(tags)
    api_sig = auth.calculate_api_sig(param.params(locals()))
    return request.get(url=param.url, headers=param.headers, params=param.params(locals()))

@param.required
@pydantic.validate_arguments
def getInfo(method: str, api_key: typ.UUID, artist: str = None, album: str = None, mbid: uuid.UUID = None, user: str = secret.user, autocorrect: typ.Bool = 0, lang: typ.lang = 'eng') -> typ.response:
    '''Get the metadata and tracklist for an album on Last.fm using the album name or a musicbrainz id.
        artist      : Required [unless mbid] : The artist name
        album       : Required [unless mbid] : The album name
        mbid        : Optional               : The musicbrainz id for the album
        username    : Optional               : The username for the context of the request. If supplied, the user's playcount for this album is included in the response.
        autocorrect : Optional               : Transform misspelled artist names into correct artist names, returning the correct version instead. The corrected artist name will be returned in the response. [0|1]
        lang        : Optional               : The language to return the biography in, expressed as an ISO 639 alpha-2 code.
        api_key     : Required               : A Last.fm API key.
    '''
    param.validate(check=((artist and album) or mbid), descr='`artist` and `album` must be provided unless `mbid` is specified')
    return request.get(url=param.url, headers=param.headers, params=param.params(locals()))

@param.required
@pydantic.validate_arguments
def getTags(method: str, api_key: typ.UUID, artist: str = None, album: str = None, mbid: uuid.UUID = None, user: str = secret.user, autocorrect: typ.Bool = 0) -> typ.response:
    '''Get the tags applied by an individual user to an album on Last.fm. To retrieve the list of top tags applied to an album by all users use `album.getTopTags`.
        artist      : Required [unless mbid] : The artist name
        album       : Required [unless mbid] : The album name
        mbid        : Optional               : The musicbrainz id for the album
        user        : Optional               : If called in non-authenticated mode you must specify the user to look up
        autocorrect : Optional               : Transform misspelled artist names into correct artist names, returning the correct version instead. The corrected artist name will be returned in the response. [0|1]
        api_key     : Required               : A Last.fm API key.
    '''
    param.validate(check=((artist and album) or mbid), descr='`artist` and `album` must be provided unless `mbid` is specified')
    return request.get(url=param.url, headers=param.headers, params=param.params(locals()))

@param.required
@pydantic.validate_arguments
def getTopTags(method: str, api_key: typ.UUID, artist: str = None, album: str = None, mbid: uuid.UUID = None, autocorrect: typ.Bool = 0) -> typ.response:
    '''Get the top tags for an album on Last.fm, ordered by popularity.
        artist      : Required [unless mbid] : The artist name
        album       : Required [unless mbid] : The album name
        mbid        : Optional               : The musicbrainz id for the album
        autocorrect : Optional               : Transform misspelled artist names into correct artist names, returning the correct version instead. The corrected artist name will be returned in the response. [0|1]
        api_key     : Required               : A Last.fm API key.
    '''
    param.validate(check=((artist and album) or mbid), descr='`artist` and `album` must be provided unless `mbid` is specified')
    return request.get(url=param.url, headers=param.headers, params=param.params(locals()))

@param.required
@pydantic.validate_arguments
def removeTag(method: str, api_key: typ.UUID, artist: str, album: str, tag: str, api_sig: typ.UUID = None, sk: str = secret.sk) -> typ.response:
    '''Remove a user's tag from an album.
        artist  : Required : The artist name
        album   : Required : The album name
        tag     : Required : A single user tag to remove from this album.
        api_sig : Required : A Last.fm method signature. See authentication for more information.
        sk      : Required : A session key generated by authenticating a user via the authentication protocol.
        api_key : Required : A Last.fm API key.
    '''
    api_sig = auth.calculate_api_sig(param.params(locals()))
    return request.get(url=param.url, headers=param.headers, params=param.params(locals()))

@param.required
@pydantic.validate_arguments
def search(method: str, api_key: typ.UUID, album: str, limit: int = 50, page: int = 1) -> typ.response:
    '''Search for an album by name. Returns album matches sorted by relevance.
        album   : Required : The album name
        limit   : Optional : The number of results to fetch per page. Defaults to ~~30~~ 50.
        page    : Optional : The page number to fetch. Defaults to first page.
        api_key : Required : A Last.fm API key.
    '''
    return request.get(url=param.url, headers=param.headers, params=param.params(locals()))
